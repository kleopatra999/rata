
Humans And Computers Cooperating

This is a data language intended to be read-writable by both humans and
computers.  It's designed to allow a program to dump its entire state to
a file, let that file be saved somewhere or edited by a hacker, and then
read the state in again and resume as if nothing had happened.

This package:
    - Defines a data language called HACC
    - Provides a C++ type representing a HACC document, called a Hacc
    - Provides a parser and emitter for Haccs, using the above
    - Provides a facility for defining conversions between Haccs and arbitrary
       C++ types, through a mechanism called Haccable
    - Provides default Haccable bindings for many standard C++ types, including:
        - Unboxed integers and floating point numbers of various sizes
    TODO- std::string, std::vector, std::unordered_map, and std::tuple
    TODO- Pointers and references to Haccable types
TODO- Provides functions to easily serialize C++ objects to and from strings
       and files, using Haccable bindings
TODO- Provides a base class called Saved that lets all instantiations be collected
       and saved to a file simultaneously
    - Provides a tiny TAP testing library that uses HACC to display debugging
       information



THE LANGUAGE:

HACC is basically just JSON with types, references, and precise floating
point values.  This spec assumes you know JSON and its terminology.

Terms used:
 - An 'ident' is a bareword consisting of ASCII letters or digits, underscores,
    and hyphens.  An ident may begin with any of these, including a digit or
    a hyphen.  Any place where you have an ident you may replace it with a
    quoted string containing anything.  "This" is equivalent to This.
 - A 'reader' is something that reads a HACC document, either a program or a
    human.
 - Likewise, a 'writer' is either a program or a human.
 - A 'value' is a JSON-like thing, such as a number or an array
 - A 'type' is a string representing the meaning of a JSON-like value.  This
    can be any string.
 - A 'valtype' is the JSON-like type of a value.  Supported valtypes are
    nulls, booleans, integers, floats, doubles, strings, refs, arrays, and
    objects.
 - An 'atom' is a null, a boolean, an number, a string, or a reference.

Features HACC has that JSON doesn't:
 - All values may be prefixed with a type and/or an id:
       - prefix{object}
       - prefix[array]
       - prefix(atom)
    - The 'prefix' part looks like one of these:
       - #type
       - #type@id
       - @id
       - @id#type
    - A type is either an ident or a quoted string.  This clarifies the meaning
       of the value that follows.  If the reader will know what type the value
       is supposed to be, the #type is optional.
    - An id is also an ident or a quoted string.  If the document was written by
       a program, this might be a memory address.  If it was written by a human,
       this might be a symbol.  No two values in one document should have the same
       id unless those values are exactly identical and would occupy the same memory
       location in a program (in other words, the same object got serialized twice
       somehow).  This should be rare, and may indicate a bug.
    - No space is allowed between these tokens.
 - A new atomic valtype is a reference.
    - It looks like one of these:
       - &@id
       - &#type@id
       - &@id#type
    - A reference can represent a pointer in a program, or anything that
       refers to another object but is not that object itself.
    - The #type is usually optional, but a writing program may want to add it
       anyway for the convenience of a reading human.
    - If a document is written to a file, then every id that is referenced must
       exist elsewhere in the document.  If it is not written in a file, then
       references may rely on shared knowledge.  For example, an interactive
       program might use memory locations as its ids, and allow a human to
       reference a location that the program informed them of earlier.
    - The id 0 is not special.  If memory addresses are being used as ids, then
       the NULL pointer should be serialized as null instead of a reference.
    - No space is allowed between these tokens.
 - Hacc differentiates between integers and floats.  The maximum precision of
    integers is implementation-specific, but must be at least 32 bits signed.
 - Floating point literals may be suffixed or replaced with a precise bit
    representation.
    - So they look like one of these:
       - 1.0
       - 1.0~3f800000
       - ~3f800000
    - The bit representation is a hexadecimal number that must be 8 digits long
       for a 32-bit float and 16 digits long for a 64-bit double.  Floats and
       doubles might be interconverted when reading a document, but when writing
       one, its bit representation must match the type used to write it.
    - Programs should always provide a bit representation, but humans don't have
       to.  If a bit representation is present, a program reading it will ignore
       the informal decimal representation.  So if a human changes the value,
       they must erase the bit representation for the program to notice.
    - No space is allowed around the ~.
    - If there is no precise bit representation, a floating point literal will be
       taken to have double precision.
 - Integers can be converted into floats and doubles, but floats and doubles
    cannot be converted into integers.  Floats can be converted to doubles and
    doubles can be converted to floats, but in the interest of keeping maximum
    precision, the differentiation between floats and doubles should be
    maintained as long as possible.
 - The names of pairs in an object may be either quoted strings or idents.
 - Any character except " and \ may be unescaped in a string, but it is
    recommended that writers escape \b, \r, \n, \f, and \t.

Features JSON has that HACC doesn't:
 - The \uxxxx construct in strings is not supported.  To put unicode in a string,
    just put it in the string.  Control characters and even NUL are allowed to
    be in a string.  There simply must be no unescaped backslashes and quotes.








