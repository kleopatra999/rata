{"hacc::Document":{
    prog:{"vis::Light_Program":{
        shaders:[$.vert $.frag]
        uses_vaos:false
        attributes:[vert_pos]
    }}
    vert:{"core::Shader":{
        type:vertex
        source:<<END
            #version 110

            uniform vec2 model_pos;
            uniform vec2 camera_pos;
            uniform vec2 camera_size;

            attribute vec2 vert_pos;

            varying vec2 tex_coords;

            void main () {
                gl_Position.xy = (model_pos - camera_pos + vert_pos) / (camera_size / 2.0);
                gl_Position.zw = vec2(0.0, 1.0);
                tex_coords = (gl_Position.xy + 1.0) / 2.0;
            }
            END
    }}
    frag:{"core::Shader":{
        type:fragment
        source:<<END
            #version 110

            uniform sampler2D tex;
            uniform sampler2D materials;

            uniform vec3 ambient;
            uniform vec3 diffuse;
            uniform vec3 radiant;

            uniform float materials_length;
            uniform int debug_type;

            varying vec2 tex_coords;

            void main () {
                vec4 atom = texture2D(tex, tex_coords);
                if (debug_type == 1) {
                    gl_FragColor = atom;
                    gl_FragColor.r *= (255.0 / materials_length);
                }
                else if (debug_type == 2) {
                    gl_FragColor.rgb = ambient;
                    gl_FragColor.a = 1.0;
                }
                else if (debug_type == 3) {
                    gl_FragColor.rgb = diffuse;
                    gl_FragColor.a = 1.0;
                }
                else {
                    vec3 amb = texture2D(materials, vec2(0.0/3.0, atom.r)).rgb;
                    vec3 dif = texture2D(materials, vec2(1.0/3.0, atom.r)).rgb;
                    vec3 spe = texture2D(materials, vec2(2.0/3.0, atom.r)).rgb;
                    vec3 rad = texture2D(materials, vec2(3.0/3.0, atom.r)).rgb;
                    gl_FragColor.rgb = amb * ambient;
                                     + dif * diffuse * atom.g
                                     + rad * radiant;
                    if (atom.g == 1.0) {
                        gl_FragColor.rgb += spe * diffuse;
                    gl_FragColor.a = 1.0;
                }
            }
            END
    }}
}}
